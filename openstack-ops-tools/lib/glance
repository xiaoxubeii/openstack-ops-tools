#!/usr/bin/env bash
GLANCE_DIR=$DEST/glance

GLANCE_CACHE_DIR=${GLANCE_CACHE_DIR:=$DATA_DIR/glance/cache}
GLANCE_IMAGE_DIR=${GLANCE_IMAGE_DIR:=$DATA_DIR/glance/images}
GLANCE_AUTH_CACHE_DIR=${GLANCE_AUTH_CACHE_DIR:-/var/cache/glance}

PROJECT_VENV["glance"]=${GLANCE_DIR}/glance.venv
GLANCE_BIN_DIR=${PROJECT_VENV["glance"]}/bin

GLANCE_CONF_DIR=${GLANCE_CONF_DIR:-/etc/glance}
GLANCE_STATE_PATH=${GLANCE_STATE_PATH:-$DATA_DIR/glance}
GLANCE_METADEF_DIR=$GLANCE_CONF_DIR/metadefs
GLANCE_REGISTRY_CONF=$GLANCE_CONF_DIR/glance-registry.conf
GLANCE_API_CONF=$GLANCE_CONF_DIR/glance-api.conf
GLANCE_SEARCH_CONF=$GLANCE_CONF_DIR/glance-search.conf
GLANCE_REGISTRY_PASTE_INI=$GLANCE_CONF_DIR/glance-registry-paste.ini
GLANCE_API_PASTE_INI=$GLANCE_CONF_DIR/glance-api-paste.ini
GLANCE_SEARCH_PASTE_INI=$GLANCE_CONF_DIR/glance-search-paste.ini
GLANCE_CACHE_CONF=$GLANCE_CONF_DIR/glance-cache.conf
GLANCE_POLICY_JSON=$GLANCE_CONF_DIR/policy.json
GLANCE_SCHEMA_JSON=$GLANCE_CONF_DIR/schema-image.json
GLANCE_SWIFT_STORE_CONF=$GLANCE_CONF_DIR/glance-swift-store.conf

# Glance connection info.  Note the port must be specified.
GLANCE_SERVICE_HOST=${GLANCE_SERVICE_HOST:-$SERVICE_HOST}
GLANCE_SERVICE_LISTEN_ADDRESS=${GLANCE_SERVICE_LISTEN_ADDRESS:-$SERVICE_LISTEN_ADDRESS}
GLANCE_SERVICE_PORT=${GLANCE_SERVICE_PORT:-9292}
GLANCE_SERVICE_PORT_INT=${GLANCE_SERVICE_PORT_INT:-19292}
GLANCE_HOSTPORT=${GLANCE_HOSTPORT:-$GLANCE_SERVICE_HOST:$GLANCE_SERVICE_PORT}
GLANCE_SERVICE_PROTOCOL=${GLANCE_SERVICE_PROTOCOL:-$SERVICE_PROTOCOL}
GLANCE_REGISTRY_PORT=${GLANCE_REGISTRY_PORT:-9191}
GLANCE_REGISTRY_PORT_INT=${GLANCE_REGISTRY_PORT_INT:-19191}
GLANCE_LOG_DIR=${LOG_DIR}/glance
GLANCE_DEFAULT_STORE=${GLANCE_DEFAULT_STORE:-file}

# Functions
# ---------

# Test if any Glance services are enabled
# is_glance_enabled
function is_glance_enabled {
    [[ ,${ENABLED_SERVICES} =~ ,"glance-" ]] && return 0
    return 1
}

# cleanup_glance() - Remove residual data files, anything left over from previous
# runs that a clean run would need to clean up
function cleanup_glance {
    # kill instances (nova)
    # delete image files (glance)
    sudo rm -rf $GLANCE_CACHE_DIR $GLANCE_IMAGE_DIR $GLANCE_AUTH_CACHE_DIR
}

# configure_glance() - Set config files, create data dirs, etc
function configure_glance {
    useradd -s /sbin/nologin -b $DATA_DIR -m -U glance
    sudo install -d -o glance -g glance $GLANCE_CONF_DIR $GLANCE_METADEF_DIR
    local dburl
    dburl=$(database_connection_url glance)

    sudo rm -f $GLANCE_REGISTRY_CONF
    iniset $GLANCE_REGISTRY_CONF DEFAULT debug $ENABLE_DEBUG_LOG_LEVEL
    iniset $GLANCE_REGISTRY_CONF database connection $dburl
    iniset $GLANCE_REGISTRY_CONF DEFAULT use_syslog $SYSLOG
    iniset $GLANCE_REGISTRY_CONF DEFAULT workers "$API_WORKERS"
    iniset $GLANCE_REGISTRY_CONF DEFAULT log_dir "$GLANCE_LOG_DIR"
    iniset $GLANCE_REGISTRY_CONF paste_deploy flavor keystone
    iniset $GLANCE_REGISTRY_CONF DEFAULT notification_driver messaging
    iniset $GLANCE_REGISTRY_CONF DEFAULT state_path $GLANCE_STATE_PATH
    iniset $GLANCE_REGISTRY_CONF oslo_concurrency lock_path $GLANCE_STATE_PATH/lock
    iniset_rpc glance $GLANCE_REGISTRY_CONF
    configure_auth_token_middleware $GLANCE_REGISTRY_CONF glance

    rm -f $GLANCE_API_CONF
    iniset $GLANCE_API_CONF DEFAULT debug $ENABLE_DEBUG_LOG_LEVEL
    iniset $GLANCE_API_CONF DEFAULT log_dir $GLANCE_LOG_DIR
    iniset $GLANCE_API_CONF database connection $dburl
    iniset $GLANCE_API_CONF DEFAULT use_syslog $SYSLOG
    iniset $GLANCE_API_CONF paste_deploy flavor keystone
    iniset $GLANCE_API_CONF DEFAULT registry_host $GLANCE_SERVICE_HOST
    iniset $GLANCE_API_CONF DEFAULT notification_driver messaging
    iniset_rpc glance $GLANCE_API_CONF
    iniset $GLANCE_API_CONF DEFAULT state_path $GLANCE_STATE_PATH
    iniset $GLANCE_API_CONF oslo_concurrency lock_path $GLANCE_STATE_PATH/lock
    configure_auth_token_middleware $GLANCE_API_CONF glance

    # Store specific configs
    iniset $GLANCE_API_CONF glance_store default_store $GLANCE_DEFAULT_STORE
    iniset $GLANCE_API_CONF glance_store filesystem_store_datadir $GLANCE_IMAGE_DIR/

    iniset $GLANCE_API_CONF DEFAULT workers "$API_WORKERS"

    cp -p $GLANCE_DIR/etc/glance-registry-paste.ini $GLANCE_REGISTRY_PASTE_INI

    cp -p $GLANCE_DIR/etc/glance-api-paste.ini $GLANCE_API_PASTE_INI

    cp -p $GLANCE_DIR/etc/policy.json $GLANCE_POLICY_JSON
    cp -p $GLANCE_DIR/etc/schema-image.json $GLANCE_SCHEMA_JSON

    cp -p $GLANCE_DIR/etc/metadefs/*.json $GLANCE_METADEF_DIR

    chown -R glance:glance $GLANCE_CONF_DIR
    _configure_glance_initserv
}

function _configure_glance_initserv {
    local glance_servs
    glance_servs=$(_get_glance_servs)
    for serv in $glance_servs; do
        if is_service_enabled $serv; then
            local initserv
            initserv=$INITSERVICE_DIR/openstack-$serv.service
            configure_initserv $initserv
            iniset "-sudo" $initserv Service User "glance"
            iniset "-sudo" $initserv Service ExecStart "$GLANCE_BIN_DIR/$serv"
        fi
    done
}

function _get_glance_servs {
    echo "glance-api glance-registry"
}

# create_glance_accounts() - Set up common required glance accounts

# Project              User            Roles
# ---------------------------------------------------------------------
# SERVICE_TENANT_NAME  glance          service
# SERVICE_TENANT_NAME  glance-swift    ResellerAdmin (if Swift is enabled)
# SERVICE_TENANT_NAME  glance-search   search (if Search is enabled)

function create_glance_accounts {
    if is_service_enabled glance-api; then

        create_service_user "glance"

        if [[ "$KEYSTONE_CATALOG_BACKEND" = 'sql' ]]; then

            get_or_create_service "glance" "image" "Glance Image Service"
            get_or_create_endpoint "image" \
                "$REGION_NAME" \
                "$GLANCE_SERVICE_PROTOCOL://$GLANCE_HOSTPORT" \
                "$GLANCE_SERVICE_PROTOCOL://$GLANCE_HOSTPORT" \
                "$GLANCE_SERVICE_PROTOCOL://$GLANCE_HOSTPORT"
        fi
    fi
}

# create_glance_cache_dir() - Part of the init_glance() process
function create_glance_cache_dir {
    # Create cache dir
    sudo install -d -o $STACK_USER $GLANCE_AUTH_CACHE_DIR/api $GLANCE_AUTH_CACHE_DIR/registry $GLANCE_AUTH_CACHE_DIR/search
    rm -f $GLANCE_AUTH_CACHE_DIR/api/* $GLANCE_AUTH_CACHE_DIR/registry/* $GLANCE_AUTH_CACHE_DIR/search/*
}

# init_glance() - Initialize databases, etc.
function init_glance {
    rm -rf $GLANCE_IMAGE_DIR
    rm -rf $GLANCE_CACHE_DIR

    install -d -o glance -g glance $GLANCE_LOG_DIR
    install -d -o glance -g glance $GLANCE_IMAGE_DIR
    install -d -o glance -g glance $GLANCE_CACHE_DIR

    # (Re)create glance database
    recreate_database glance

    # Migrate glance database
    $GLANCE_BIN_DIR/glance-manage db_sync

    # Load metadata definitions
    $GLANCE_BIN_DIR/glance-manage db_load_metadefs

    create_glance_cache_dir
}

# install_glance() - Collect source and prepare
function install_glance {
    :
}

# start_glance() - Start running processes, including screen
function start_glance {
    if is_service_enabled glance-api; then
        start_opservice glance-api
        enable_opservice glance-api
    fi

    if is_service_enabled glance-registry; then
        start_opservice glance-registry
        enable_opservice glance-registry
    fi
}

# stop_glance() - Stop running processes
function stop_glance {
    if is_service_enabled glance-api; then
        stop_opservice glance-api
    fi

    if is_service_enabled glance-registry; then
        stop_opservice glance-registry
    fi
}
